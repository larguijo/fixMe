import React from 'react';
import { Field, ErrorMessage } from 'formik';

const renderText = ({ id, label, type }) => {
  return <div key={id} className="row">
    <div className="input-field col s12">
      <Field type={type} name={id} />
      <label htmlFor={id}>{label}</label>
      <ErrorMessage className="invalid" name={id} component="div" />
    </div>
  </div>
}

const renderSelect = ({ id, label, type, options, defaultValue }) => {
  return (
    <div key={id} className="row">
      <div className="input-field col s12">
        <Field component="select" defaultValue={defaultValue || ""} name={id} className="browser-default">
          {options.map(o => <option key={o.value} value={o.value}>{o.label}</option>)}
          {!defaultValue && (<option disabled value="">Choose your option</option>)}
        </Field>
        <label className="active" htmlFor={id}>{label}</label>
      </div >
    </div>
  );
}

export const renderFields = (entity, fields) => {
  return fields ? Object.keys(fields).map(f => {
    const field = fields[f];
    const { fieldName, defaultValue, validate, comment } = field;
    if (!field._autoGenerated && fieldName !== 'projectId') {
      if (validate && validate.isIn) {
        return renderSelect({
          id: fieldName, label: comment || fieldName, defaultValue, options: validate.isIn[0].map(o => ({ label: o, value: o }))
        })
      } else return renderText({ id: fieldName, label: comment || fieldName, type: "text" });
    }
    return null;
  }) : null
}