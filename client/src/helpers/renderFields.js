import React from 'react';
import { Field, ErrorMessage } from 'formik';

const renderText = ({ id, label, type, validate, setFieldValue }) => {
  const options = {};
  if (validate) {
    if (validate.isUppercase) options.onChange = (e) => {
      const val = e.target.value.toUpperCase();
      setFieldValue(id, val);
    };
  };

  return <div key={id} className="row">
    <div className="input-field col s12">
      <Field type={type} name={id} style={options} {...options} />
      <label htmlFor={id}>{label}</label>
      <ErrorMessage className="invalid" name={id} component="div" />
    </div>
  </div>
}

const renderSelect = ({ id, label, type, options, defaultValue }) => {
  return (
    <div key={id} className="row">
      <div className="input-field col s12">
        <Field component="select" defaultValue={defaultValue || ""} name={id} className="browser-default">
          {options.map(o => <option key={o.value} value={o.value}>{o.label}</option>)}
          {!defaultValue && (<option disabled value="">Choose your option</option>)}
        </Field>
        <label className="active" htmlFor={id}>{label}</label>
      </div >
    </div>
  );
}

/**
 * Renders form fields with the metadata coming from ORM.
 * @param {string} entity is the name of the entity we want to display in the form.
 * @param {object} fields list of fields comming
 */
export const RenderFields = ({ entity, fields, setFieldValue }) => {
  if (!fields) return null;


  const { attributes, references } = fields;
  return attributes ? Object.keys(attributes).map(f => {
    const field = attributes[f];
    const refData = references[f];
    const { fieldName, defaultValue, validate, comment, references: pointsTo } = field;
    if (!field._autoGenerated && fieldName !== 'projectId') {
      if ((validate && validate.isIn) || pointsTo) {
        return renderSelect({
          id: fieldName,
          label: comment || fieldName,
          defaultValue,
          options: pointsTo ?
            refData.map(({ name, id }) => ({ label: name, value: id })) :
            validate.isIn[0].map(o => ({ label: o, value: o }))
        })
      } else return renderText(
        {
          id: fieldName,
          label: comment || fieldName,
          type: "text",
          validate,
          setFieldValue
        });
    }
    return null;
  }) : null
}